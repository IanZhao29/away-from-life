(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{581:function(t,a,s){"use strict";s.r(a);var n=s(12),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"莱斯定理-rice-s-theorem-的简单证明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#莱斯定理-rice-s-theorem-的简单证明"}},[t._v("#")]),t._v(" 莱斯定理(Rice's Theorem)的简单证明：")]),t._v(" "),s("h2",{attrs:{id:"莱斯定理的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#莱斯定理的定义"}},[t._v("#")]),t._v(" 莱斯定理的定义：")]),t._v(" "),s("h3",{attrs:{id:"英文版定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#英文版定义"}},[t._v("#")]),t._v(" 英文版定义：")]),t._v(" "),s("ul",[s("li",[t._v("Any nontrivial property about the language recognized by a Turing machine is undecidable.")])]),t._v(" "),s("h3",{attrs:{id:"中文翻译"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中文翻译"}},[t._v("#")]),t._v(" 中文翻译：")]),t._v(" "),s("ul",[s("li",[t._v("递归可枚举语言的任何非平凡的性质，都是不可判定的。")])]),t._v(" "),s("h3",{attrs:{id:"翻译成人话"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#翻译成人话"}},[t._v("#")]),t._v(" 翻译成人话：")]),t._v(" "),s("h4",{attrs:{id:"什么是递归可枚举语言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是递归可枚举语言"}},[t._v("#")]),t._v(" 什么是递归可枚举语言？")]),t._v(" "),s("p",[t._v("考虑一个问题：验证字符串w属于语言L。")]),t._v(" "),s("p",[t._v("我们把字符串输入图灵机，然后看图灵机停不停机，只要停机，那就说明w属于L，")]),t._v(" "),s("p",[t._v("至于图灵机此时的停机状态，根本不必管。")]),t._v(" "),s("p",[t._v("换句话说，只要w确实是属于L的，那么验证这件事就一定能办到，对于L中的元素，我一一验证，总有一天会验证到这个w，这就是可枚举的意思。")]),t._v(" "),s("p",[t._v("图灵机找到通过把w与L中的字符串一一对不，这个过程就叫做递归。")]),t._v(" "),s("blockquote",[s("p",[t._v("递归可枚举与图灵机半判定等价！")])]),t._v(" "),s("h4",{attrs:{id:"什么是非平凡性质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是非平凡性质"}},[t._v("#")]),t._v(" 什么是非平凡性质？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("打个比方，人类是一种动物，我们都需要吃饭、喝水和嘘嘘，但是我们为什么被称为人类呢？")])]),t._v(" "),s("li",[s("blockquote",[s("p",[t._v("一般认为，人与动物的本质区别在于制造与使用工具。")])])])]),t._v(" "),s("p",[t._v("在这个例子中:")]),t._v(" "),s("ul",[s("li",[t._v("平凡性质：吃饭、喝水和嘘嘘等等大家都可以做的事情")]),t._v(" "),s("li",[t._v("非平凡性质：人类可以制造与使用工具")])]),t._v(" "),s("h4",{attrs:{id:"什么是不可判定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是不可判定"}},[t._v("#")]),t._v(" 什么是不可判定？")]),t._v(" "),s("p",[t._v("就是无法找到一个完美的算法，单独用这个算法就可以解决问题。")]),t._v(" "),s("p",[t._v("至此，我们把这句话翻译成了人话。")]),t._v(" "),s("h2",{attrs:{id:"莱斯定理的证明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#莱斯定理的证明"}},[t._v("#")]),t._v(" 莱斯定理的证明：")]),t._v(" "),s("p",[t._v("一切的问题都能用反证法和数学归纳法解决，所以我们用反证法来证明：")]),t._v(" "),s("p",[t._v("直接找一个不讲武德的反例子：")]),t._v(" "),s("p",[t._v("我们假设，又一个叫做“divides_by_zero()”的算法可以完美解决解决分母为0的问题")]),t._v(" "),s("p",[t._v("然后我们构建一个程序bad();")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bad")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("divides_by_zero")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("如果divides_by_zero()说bad()会有除零的错误，那么我们执行bad()，却不会遇到该错误。")]),t._v(" "),s("p",[t._v("反之，如果divides_by_zero()说不会有除零的错误，那么bad()随即就给你安排一个。")]),t._v(" "),s("p",[t._v("这说明，这世上并不存在一个完美的算法，来准确的判定每个程序是否有某个非平凡的性质P。")]),t._v(" "),s("p",[t._v("而只要我们能构造的出一个反例，那就说明，还可以有成千上万的反例。")]),t._v(" "),s("h2",{attrs:{id:"图灵机停机问题的证明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图灵机停机问题的证明"}},[t._v("#")]),t._v(" 图灵机停机问题的证明：")]),t._v(" "),s("p",[t._v("https://blog.csdn.net/baimafujinji/article/details/50179715")])])}),[],!1,null,null,null);a.default=e.exports}}]);