(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{625:function(e,o,t){"use strict";t.r(o);var s=t(12),a=Object(s.a)({},(function(){var e=this,o=e.$createElement,t=e._self._c||o;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"cs357-考试内容整理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cs357-考试内容整理"}},[e._v("#")]),e._v(" CS357 考试内容整理")]),e._v(" "),t("h2",{attrs:{id:"there-may-be-some-questions-about-design-by-contract-you-would-not-be-asked-to-write-some-program-codes-but-you-may-be-asked-to-explain-some-concepts-features-of-dbc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#there-may-be-some-questions-about-design-by-contract-you-would-not-be-asked-to-write-some-program-codes-but-you-may-be-asked-to-explain-some-concepts-features-of-dbc"}},[e._v("#")]),e._v(" There may be some questions about Design by Contract. You would not be asked to write some program codes, but you may be asked to explain some concepts/features of DbC.")]),e._v(" "),t("p",[e._v("Every class has two “roles” associated with it:  See CS357EXAM2020")]),e._v(" "),t("p",[e._v("In summary, if A is a superclass of B, then you’re writing B, you can:")]),e._v(" "),t("ul",[t("li",[e._v("strengthen the class invariant")]),e._v(" "),t("li",[e._v("weaken the precondition of overridden methods")]),e._v(" "),t("li",[e._v("strengthen the postcondition of overridden methods")])]),e._v(" "),t("p",[e._v("But not the opposite!!!")]),e._v(" "),t("h2",{attrs:{id:"you-need-to-know-what-propositional-and-predicate-logic-are-in-addition-the-different-terminologies-related-to-each-one-also-natural-deduction-rules-to-prove-the-validity-of-formulas"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#you-need-to-know-what-propositional-and-predicate-logic-are-in-addition-the-different-terminologies-related-to-each-one-also-natural-deduction-rules-to-prove-the-validity-of-formulas"}},[e._v("#")]),e._v(" You need to know what propositional and predicate logic are. In addition, the different terminologies related to each one. Also, natural deduction rules to prove the validity of formulas.")]),e._v(" "),t("p",[e._v("See CS357EXAM2020")]),e._v(" "),t("h2",{attrs:{id:"there-would-be-some-questions-about-models-and-concepts-around-models-for-example-satisfiable-valid-unsatisfiable-truth-table-soundness-completeness-and-equisatisfiable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#there-would-be-some-questions-about-models-and-concepts-around-models-for-example-satisfiable-valid-unsatisfiable-truth-table-soundness-completeness-and-equisatisfiable"}},[e._v("#")]),e._v(" There would be some questions about Models and concepts around models. For example, satisfiable, valid, unsatisfiable, truth table, soundness, completeness, and equisatisfiable.")]),e._v(" "),t("p",[e._v("satisfiable, valid, unsatisfiable: See CS357EXAM2019")]),e._v(" "),t("p",[e._v("soundness, completeness: See CS357EXAM2020")]),e._v(" "),t("p",[e._v("equisatisfiable: Given two formulas 𝑋 and 𝑌, we say they are equisatisfiable if and only X and Y are satisfiable with the same model.")]),e._v(" "),t("p",[e._v("For example:")]),e._v(" "),t("div",{staticClass:"language-nature line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("𝑋 = 𝑎 ∨ 𝑏\n𝑌 = 𝑎 ∨ 𝑐 ∧ 𝑏 ∨ ¬𝑐\nMod𝑒𝑙 𝑀 = {𝑎 ↦ 1, 𝑏 ↦ 0, 𝑐 ↦ 0}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("ul",[t("li",[e._v("𝑋 and 𝑌 are both satisfiable with the 𝑀𝑜𝑑𝑒𝑙 M")]),e._v(" "),t("li",[e._v("Therefore, 𝑋 and 𝑌 are equisatisfiable but they are not equal.")])]),e._v(" "),t("p",[e._v("Equisatisfiability is weaker than equivalence")]),e._v(" "),t("h2",{attrs:{id:"there-may-be-some-questions-about-conjunctive-normal-form-cnf-and-converting-a-formula-to-cnf-you-can-use-any-of-the-approaches-described-in-the-slides-to-convert-a-formula-to-cnf"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#there-may-be-some-questions-about-conjunctive-normal-form-cnf-and-converting-a-formula-to-cnf-you-can-use-any-of-the-approaches-described-in-the-slides-to-convert-a-formula-to-cnf"}},[e._v("#")]),e._v(" There may be some questions about Conjunctive Normal Form (CNF) and converting a formula to CNF. You can use any of the approaches described in the slides to convert a formula to CNF.")]),e._v(" "),t("p",[e._v("See CS357EXAM202")]),e._v(" "),t("h2",{attrs:{id:"there-may-be-some-questions-about-sat-and-smt-solvers-concepts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#there-may-be-some-questions-about-sat-and-smt-solvers-concepts"}},[e._v("#")]),e._v(" There may be some questions about SAT and SMT solvers concepts.")]),e._v(" "),t("p",[e._v("SAT solvers: A SAT solver can read in your CNF formulas in Dimacsformat, and find a model for your theory (if there exists one)")]),e._v(" "),t("p",[e._v("SMT: An SMT Solver is a collection of Little Engines of Proof. SAT + Theory Solvers = SMT")]),e._v(" "),t("h2",{attrs:{id:"there-would-be-some-questions-to-verify-some-pieces-of-codes-with-hoare-logic"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#there-would-be-some-questions-to-verify-some-pieces-of-codes-with-hoare-logic"}},[e._v("#")]),e._v(" There would be some questions to verify some pieces of codes with Hoare logic.")]),e._v(" "),t("h2",{attrs:{id:"there-would-be-some-questions-about-dafny-in-the-questions-you-will-be-asked-to-provide-precondition-postcondition-loop-invariant-and-loop-termination-for-some-pieces-of-codes-the-codes-may-or-may-not-include-arrays-recursive-methods-and-or-classes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#there-would-be-some-questions-about-dafny-in-the-questions-you-will-be-asked-to-provide-precondition-postcondition-loop-invariant-and-loop-termination-for-some-pieces-of-codes-the-codes-may-or-may-not-include-arrays-recursive-methods-and-or-classes"}},[e._v("#")]),e._v(" There would be some questions about Dafny. In the questions, you will be asked to provide precondition, postcondition, loop invariant (and loop termination), for some pieces of codes. The codes may or may not include arrays, recursive methods, and/or classes.")]),e._v(" "),t("h2",{attrs:{id:"regarding-model-checking-temporal-logic-you-may-be-asked-for-some-of-the-terminologies-or-concepts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regarding-model-checking-temporal-logic-you-may-be-asked-for-some-of-the-terminologies-or-concepts"}},[e._v("#")]),e._v(" Regarding Model checking (temporal logic), you may be asked for some of the terminologies or concepts")])])}),[],!1,null,null,null);o.default=a.exports}}]);