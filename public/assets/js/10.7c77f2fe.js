(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{478:function(t,a,s){t.exports=s.p+"assets/img/statePattern.9c38eaea.jpg"},568:function(t,a,s){"use strict";s.r(a);var e=s(12),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"状态模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#状态模式"}},[t._v("#")]),t._v(" 状态模式")]),t._v(" "),e("h2",{attrs:{id:"模式用途"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模式用途"}},[t._v("#")]),t._v(" 模式用途")]),t._v(" "),e("ul",[e("li",[t._v("在很多情况下，一个对象的行为取决于一个或多个动态变化的属性，这样的属性叫做状态，这样的对象叫做有状态的(stateful)对象，这样的对象状态是从事先定义好的一系列值中取出的。当一个这样的对象与外部事件产生互动时，其内部状态就会改变，从而使得系统的行为也随之发生变化。")]),t._v(" "),e("li",[t._v("在UML中可以使用状态图来描述对象状态的变化。")])]),t._v(" "),e("h2",{attrs:{id:"模式定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模式定义"}},[t._v("#")]),t._v(" 模式定义")]),t._v(" "),e("p",[t._v("状态模式(State Pattern) ：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。其别名为状态对象(Objects for States)，状态模式是一种对象行为型模式。")]),t._v(" "),e("h2",{attrs:{id:"模式结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模式结构"}},[t._v("#")]),t._v(" 模式结构")]),t._v(" "),e("p",[t._v("状态模式包含如下角色：")]),t._v(" "),e("ul",[e("li",[t._v("Context: 环境类")]),t._v(" "),e("li",[t._v("State: 抽象状态类")]),t._v(" "),e("li",[t._v("ConcreteState: 具体状态类")])]),t._v(" "),e("h2",{attrs:{id:"uml类图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uml类图"}},[t._v("#")]),t._v(" UML类图")]),t._v(" "),e("p",[e("img",{attrs:{src:s(478),alt:"uml类图"}})])])}),[],!1,null,null,null);a.default=r.exports}}]);